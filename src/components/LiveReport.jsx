import { useEffect, useState } from "react";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–π—Ç–æ–≤ - –±–∞–∑–æ–≤—ã–µ URL –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const sites = [
    "/li/stat/dontr.ru/index.html",
    "/li/stat/hsdigital/rn/smi/61/index.html",
    "/li/stat/bloknot-rostov.ru/index.html",
    "/li/stat/donday.ru/index.html",
    "/li/stat/donnews.ru/index.html",
    "/li/stat/panram.ru/index.html",
    "/li/stat/privet-rostov.ru/index.html",
    "/li/stat/rostovgazeta.ru/index.html",
    "/li/stat/big-rostov.ru/index.html",
    "/li/stat/don24.ru/index.html",
];

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML —Å –¥–∞–Ω–Ω—ã–º–∏ LiveInternet
 * –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å –Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ (period=week), —Ç–∞–∫ –∏ —Å –º–µ—Å—è—á–Ω—ã–º–∏ (period=month) –æ—Ç—á–µ—Ç–∞–º–∏
 */
function parseHTML(html) {
    console.log("–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ HTML, –¥–ª–∏–Ω–∞:", html.length);

    // –ò—â–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–∞ <pre> - —Ç–∞–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const preMatch = html.match(/<pre[^>]*>([\s\S]*?)<\/pre>/i);
    if (!preMatch) {
        console.log("–¢–µ–≥ <pre> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML");
        return [];
    }

    const preContent = preMatch[1];
    console.log("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ <pre> –Ω–∞–π–¥–µ–Ω–æ, –¥–ª–∏–Ω–∞:", preContent.length);

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    const lines = preContent.split("\n").map((l) => l.trim()).filter(Boolean);
    console.log("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:", lines.length);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    // –î–ª—è period=week: —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "16 –¥–µ–∫ 1234 567" 
    // –î–ª—è period=month: —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "–ú–∞—Ä 23    1787096   592185"
    const dataLines = lines.filter((line) => {
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–∞–º–∏ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Ä—É—Å—Å–∫–æ–π –±—É–∫–≤—ã)
        return /^\d/.test(line) || /^[–∞-—è—ë]/iu.test(line);
    });

    console.log("–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏:", dataLines.length);
    console.log("–ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫:", dataLines.slice(0, 3));

    // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
    return dataLines.map((line, index) => {
        // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ —Ç–∞–±–∞–º, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const parts = line.split(/\s+/).filter(Boolean);
        console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–æ–∫—É ${index}:`, parts);

        if (parts.length < 3) {
            console.log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ:", line);
            return null;
        }

        let date, views, visitors;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –ø–∞—Ä—Å–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        if (/^\d{1,2}$/.test(parts[0]) && /^[–∞-—è—ë]/iu.test(parts[1])) {
            // –ù–µ–¥–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (period=week): "16 –¥–µ–∫ 1234 567"
            date = parts[0] + " " + parts[1]; // "16 –¥–µ–∫"
            views = parseInt(parts[2], 10) || 0; // 1234
            visitors = parseInt(parts[3], 10) || 0; // 567
        } else if (/^[–∞-—è—ë]/iu.test(parts[0])) {
            // –ú–µ—Å—è—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (period=month): "–ú–∞—Ä 23 1787096 592185"
            if (/^\d{2}$/.test(parts[1])) {
                // –§–æ—Ä–º–∞—Ç —Å –¥–≤—É–∑–Ω–∞—á–Ω—ã–º –≥–æ–¥–æ–º: "–ú–∞—Ä 23 1787096 592185"
                date = parts[0] + " " + parts[1]; // "–ú–∞—Ä 23"
                views = parseInt(parts[2], 10) || 0; // 1787096
                visitors = parseInt(parts[3], 10) || 0; // 592185
            } else if (/^\d{4}$/.test(parts[1])) {
                // –§–æ—Ä–º–∞—Ç —Å —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–º –≥–æ–¥–æ–º: "–¥–µ–∫ 2024 1234 567"
                date = parts[0] + " " + parts[1]; // "–¥–µ–∫ 2024"
                views = parseInt(parts[2], 10) || 0; // 1234
                visitors = parseInt(parts[3], 10) || 0; // 567
            } else {
                // –ë–µ–∑ –≥–æ–¥–∞: "–¥–µ–∫–∞–±—Ä—å 1234 567"
                date = parts[0]; // "–¥–µ–∫–∞–±—Ä—å"
                views = parseInt(parts[1], 10) || 0; // 1234
                visitors = parseInt(parts[2], 10) || 0; // 567
            }
        } else {
            // Fallback: –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π
            date = parts[0];
            views = parseInt(parts[1], 10) || 0;
            visitors = parseInt(parts[2], 10) || 0;
        }

        return { date, views, visitors };
    }).filter(Boolean); // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä—É—Å—Å–∫–∏—Ö –¥–∞—Ç
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –Ω–µ–¥–µ–ª—å–Ω—ã–µ ("16 –¥–µ–∫"), —Ç–∞–∫ –∏ –º–µ—Å—è—á–Ω—ã–µ ("–¥–µ–∫ 2024") —Ñ–æ—Ä–º–∞—Ç—ã
 */
function sortDates(dates, isMonthly = false) {
    // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤ –≤ —á–∏—Å–ª–∞ (0-11)
    const monthMap = {
        "—è–Ω–≤": 0, "—è–Ω–≤–∞—Ä—å": 0, "—è–Ω–≤–∞—Ä—è": 0,
        "—Ñ–µ–≤": 1, "—Ñ–µ–≤—Ä–∞–ª—å": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 1,
        "–º–∞—Ä": 2, "–º–∞—Ä—Ç": 2, "–º–∞—Ä—Ç–∞": 2,
        "–∞–ø—Ä": 3, "–∞–ø—Ä–µ–ª—å": 3, "–∞–ø—Ä–µ–ª—è": 3,
        "–º–∞–π": 4, "–º–∞—è": 4,
        "–∏—é–Ω": 5, "–∏—é–Ω—å": 5, "–∏—é–Ω—è": 5,
        "–∏—é–ª": 6, "–∏—é–ª—å": 6, "–∏—é–ª—è": 6,
        "–∞–≤–≥": 7, "–∞–≤–≥—É—Å—Ç": 7, "–∞–≤–≥—É—Å—Ç–∞": 7,
        "—Å–µ–Ω": 8, "—Å–µ–Ω—Ç—è–±—Ä—å": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 8,
        "–æ–∫—Ç": 9, "–æ–∫—Ç—è–±—Ä—å": 9, "–æ–∫—Ç—è–±—Ä—è": 9,
        "–Ω–æ—è": 10, "–Ω–æ—è–±—Ä—å": 10, "–Ω–æ—è–±—Ä—è": 10,
        "–¥–µ–∫": 11, "–¥–µ–∫–∞–±—Ä—å": 11, "–¥–µ–∫–∞–±—Ä—è": 11
    };

    return dates.sort((a, b) => {
        if (isMonthly) {
            // –î–ª—è –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: "–ú–∞—Ä 23", "–¥–µ–∫ 2024" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–¥–µ–∫"
            const aParts = a.split(" ");
            const bParts = b.split(" ");

            const aMonth = monthMap[aParts[0]?.toLowerCase()] ?? 0;
            const bMonth = monthMap[bParts[0]?.toLowerCase()] ?? 0;

            let aYear, bYear;
            if (aParts[1]) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ–¥ –≤ –¥–∞–Ω–Ω—ã—Ö
                const yearNum = parseInt(aParts[1]);
                if (yearNum < 50) {
                    // –î–≤—É–∑–Ω–∞—á–Ω—ã–π –≥–æ–¥ 00-49 = 2000-2049
                    aYear = 2000 + yearNum;
                } else if (yearNum < 100) {
                    // –î–≤—É–∑–Ω–∞—á–Ω—ã–π –≥–æ–¥ 50-99 = 1950-1999
                    aYear = 1900 + yearNum;
                } else {
                    // –ß–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –≥–æ–¥
                    aYear = yearNum;
                }
            } else {
                aYear = 2025; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –≥–æ–¥
            }

            if (bParts[1]) {
                const yearNum = parseInt(bParts[1]);
                if (yearNum < 50) {
                    bYear = 2000 + yearNum;
                } else if (yearNum < 100) {
                    bYear = 1900 + yearNum;
                } else {
                    bYear = yearNum;
                }
            } else {
                bYear = 2025;
            }

            // –°–Ω–∞—á–∞–ª–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≥–æ–¥, –ø–æ—Ç–æ–º –º–µ—Å—è—Ü
            if (aYear !== bYear) return aYear - bYear;
            return aMonth - bMonth;
        } else {
            // –î–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: "16 –¥–µ–∫"
            const [aDay, aMonth] = a.split(" ");
            const [bDay, bMonth] = b.split(" ");

            if (!aMonth || !bMonth) return 0;

            const aDate = new Date(2025, monthMap[aMonth.toLowerCase()] ?? 0, parseInt(aDay) || 1);
            const bDate = new Date(2025, monthMap[bMonth.toLowerCase()] ?? 0, parseInt(bDay) || 1);
            return aDate - bDate;
        }
    });
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É –Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –∏ –º–µ—Å—è—á–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏
 */
function Navigation({ currentPeriod, onPeriodChange }) {
    return (
        <nav className="bg-white shadow-lg mb-6">
            <div className="max-w-6xl mx-auto px-4">
                <div className="flex justify-between items-center py-4">
                    <div className="flex items-center space-x-2">
                        <span className="text-2xl">üìà</span>
                        <h1 className="text-xl font-bold text-gray-800">LiveInternet Analytics</h1>
                    </div>

                    <div className="flex space-x-1">
                        <button
                            onClick={() => onPeriodChange('week')}
                            className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-colors ${currentPeriod === 'week'
                                    ? 'bg-blue-600 text-white'
                                    : 'text-gray-600 hover:bg-gray-100'
                                }`}
                        >
                            <span>üìÖ</span>
                            <span>–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</span>
                        </button>

                        <button
                            onClick={() => onPeriodChange('month')}
                            className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-colors ${currentPeriod === 'month'
                                    ? 'bg-blue-600 text-white'
                                    : 'text-gray-600 hover:bg-gray-100'
                                }`}
                        >
                            <span>üìä</span>
                            <span>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
    );
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
 */
export default function LiveInternetReport() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const [period, setPeriod] = useState('week'); // –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: 'week' –∏–ª–∏ 'month'
    const [data, setData] = useState([]); // –î–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
    const [selectedDate, setSelectedDate] = useState(null); // –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const [allDates, setAllDates] = useState([]); // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
    const [loading, setLoading] = useState(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const [error, setError] = useState(null); // –û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏

    const isMonthly = period === 'month';
    const title = period === 'week' ? '–û—Ç—á—ë—Ç LiveInternet –Ω–µ–¥–µ–ª—å–Ω—ã–π' : '–û—Ç—á—ë—Ç LiveInternet –º–µ—Å—è—á–Ω—ã–π';

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞
    useEffect(() => {
        setLoading(true);
        setError(null);

        console.log("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞:", period);

        // –°–æ–∑–¥–∞–µ–º URL —Å –Ω—É–∂–Ω—ã–º query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º period
        const urlsWithParams = sites.map(url =>
            `${url}?period=${period}&graph=table&total=yes`
        );

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
        Promise.all(
            urlsWithParams.map((url) =>
                fetch(url)
                    .then((res) => {
                        console.log(`–û—Ç–≤–µ—Ç –æ—Ç ${url}: —Å—Ç–∞—Ç—É—Å ${res.status}`);
                        if (!res.ok) throw new Error(`HTTP ${res.status}`);
                        return res.text();
                    })
                    .then((html) => ({
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏–∑ URL (—É–±–∏—Ä–∞–µ–º –ø—É—Ç—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
                        site: url
                            .replace("/li/stat/", "")
                            .replace("/index.html", "")
                            .split("?")[0],
                        stats: parseHTML(html), // –ü–∞—Ä—Å–∏–º HTML –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    }))
                    .catch((err) => {
                        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", url, err);
                        return {
                            site: url.replace("/li/stat/", "").replace("/index.html", "").split("?")[0],
                            stats: [] // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        };
                    })
            )
        ).then((result) => {
            console.log("–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", result);
            setData(result);

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã —Å–æ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
            const datesSet = new Set();
            result.forEach(({ stats }) => {
                stats.forEach((s) => {
                    if (s.date) datesSet.add(s.date);
                });
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const sortedDates = sortDates(Array.from(datesSet), isMonthly);
            console.log("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã:", sortedDates);

            setAllDates(sortedDates);
            setSelectedDate(sortedDates.at(-1) || null);
            setLoading(false);
        }).catch((err) => {
            console.error("–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
            setError(err.message);
            setLoading(false);
        });
    }, [period, isMonthly]); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
    const handlePeriodChange = (newPeriod) => {
        if (newPeriod !== period) {
            setPeriod(newPeriod);
        }
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    const csvLines = ["–°–∞–π—Ç;–ü—Ä–æ—Å–º–æ—Ç—Ä—ã;–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏"];

    const csvData = data.map(({ site, stats }) => {
        const s = stats.find((st) => st.date === selectedDate);
        return {
            site,
            views: s ? s.views : 0,
            visitors: s ? s.visitors : 0,
        };
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–π—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    csvData.sort((a, b) => b.visitors - a.visitors);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ CSV
    csvData.forEach(({ site, views, visitors }) => {
        const v = views || "-";
        const vis = visitors || "-";
        csvLines.push(`${site};${v};${vis}`);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
    const csvString = "\uFEFF" + csvLines.join("\n");

    // –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞
    const downloadCSV = () => {
        if (!selectedDate) return;

        const fileDate = selectedDate.replace(/\s+/g, "-");
        const fileName = `liveinternet_${period}_report_${fileDate}.csv`;

        const blob = new Blob([csvString], { type: "text/csv;charset=utf-8;" });
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.setAttribute("download", fileName);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    if (loading) {
        return (
            <div className="min-h-screen bg-gray-100">
                <Navigation currentPeriod={period} onPeriodChange={handlePeriodChange} />
                <div className="p-6">
                    <div className="flex items-center justify-center">
                        <div className="text-xl">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
                    </div>
                </div>
            </div>
        );
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    if (error) {
        return (
            <div className="min-h-screen bg-gray-100">
                <Navigation currentPeriod={period} onPeriodChange={handlePeriodChange} />
                <div className="p-6">
                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                        <strong>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</strong> {error}
                        <br />
                        <button
                            onClick={() => handlePeriodChange(period)}
                            className="mt-2 text-red-600 underline"
                        >
                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    // –û—Å–Ω–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    return (
        <div className="min-h-screen bg-gray-100">
            <Navigation currentPeriod={period} onPeriodChange={handlePeriodChange} />

            <div className="p-6">
                <h1 className="text-2xl font-bold mb-4">üìä {title}</h1>

                {/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–∞—Ç—ã */}
                {allDates.length > 0 && (
                    <div className="mb-6">
                        <label className="mr-2 font-semibold">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</label>
                        <select
                            className="p-2 border rounded shadow bg-white"
                            value={selectedDate || ""}
                            onChange={(e) => setSelectedDate(e.target.value)}
                        >
                            {allDates.map((date) => (
                                <option key={date} value={date}>
                                    {date}
                                </option>
                            ))}
                        </select>
                    </div>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV */}
                <button
                    onClick={downloadCSV}
                    className="mb-6 px-4 py-2 bg-blue-600 text-white rounded shadow hover:bg-blue-700 disabled:bg-gray-400"
                    disabled={!selectedDate}
                >
                    ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV
                </button>

                {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–∞–π—Ç–æ–≤ */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                    {data.map(({ site, stats }) => {
                        const s = stats.find((st) => st.date === selectedDate);
                        return (
                            <div key={site} className="bg-white shadow-lg rounded-2xl p-4">
                                <h2 className="font-semibold text-lg mb-2">{site}</h2>
                                {s ? (
                                    <div>
                                        <p>üìÖ {s.date}</p>
                                        <p>üìë –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: <b>{s.views.toLocaleString()}</b></p>
                                        <p>üë• –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: <b>{s.visitors.toLocaleString()}</b></p>
                                    </div>
                                ) : (
                                    <p className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>
                                )}
                            </div>
                        );
                    })}
                </div>

                {/* –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º–∞—è —Å–µ–∫—Ü–∏—è —Å CSV –¥–∞–Ω–Ω—ã–º–∏ */}
                <details className="mb-4">
                    <summary className="cursor-pointer text-xl font-semibold mb-2">
                        üìã –ü–æ–∫–∞–∑–∞—Ç—å CSV –¥–∞–Ω–Ω—ã–µ
                    </summary>
                    <textarea
                        readOnly
                        className="w-full h-64 p-2 border rounded bg-white font-mono text-sm"
                        value={csvString}
                    />
                </details>
            </div>
        </div>
    );
}